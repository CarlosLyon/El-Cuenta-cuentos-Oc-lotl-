---
- name: Activar un servicio
  hosts:
  vars:
    servicio: bthserv
  
  tasks:
    - name: Detectar sistema operativo
      set_fact:
        sistema: "{{ ansible_os_family }}"

    - debug:
        msg: "El OS es: {{ sistema }}"

##########################
## ECHO PARA Linux ##
##########################
    - name: Iniciar un servicio en Linux
      ansible.builtin.systemd:
        name: "{{ servicio }}"  #"{{ service }}"
        state: started
      register: serv_lxn
      when: sistema == "RedHat" or sistema == "Debian"

    - debug: var=serv_lxn
      when: sistema == "RedHat" or sistema == "Debian"
##########################
## ECHO PARA WINDOWS ##
##########################
    - name: Iniciar un servicio en Windows
      win_service:
        name: "{{ servicio }}" #"{{ service }}"     #wuauserv
        state: restarted
        start_mode: manual
    
      when: sistema == "Windows"  

    - debug: var=serv_win  
      when: sistema == "Windows"        


##########################
## EVALUACIÓN DE TAREA EN LINUX ##
##########################


    - set_fact: resultTarea="SUCCESSFUL"
      when: serv_lxn.failed == false
      

    - set_fact: resultTarea="ESCALATED"
      when: serv_lxn.failed == true

    - debug: var=resultTarea
      ignore_errors: yes

    # - debug: var=resultTarea
    #   ignore_errors: yes
    # - set_fact:
    #     resultTarea: "{{ 'SUCCESSFUL' if serv_lxn.failed is false and serv_lxn.failed is true else 'ESCALATED' }}"
    #   ignore_errors: yes
    #   when: sistema == "RedHat" or sistema == "Debian"

    # - debug:
    #     var: resultTarea
    #   ignore_errors: yes
    #   when: sistema == "RedHat" or sistema == "Debian"

    ##########################
    ## EVALUACIÓN DE TAREA EN WINDOWS ##
    ##########################
    - set_fact:
        resultTarea: "{{ 'SUCCESSFUL' if serv_win is defined and serv_win.changed == true else 'ESCALATED' }}"
      ignore_errors: yes
      when: ansible_os_family == 'Windows'

    - debug:
        var: resultTarea
      ignore_errors: yes
      when: ansible_os_family == 'Windows'

    ##########################
    ## RESULTADO DE LA TAREA EJECUTADA EN LINUX ##
    ##########################
    - name: Resultado de la tarea cuando es Exitoso en Linux
      block:
        - name: Muestra el Resultado
          debug:
            msg:
              - "RESULT-AUTOMATION"
              - "-------------------------------------------------------"
              - "Remediation Task Result is: {{ resultTarea }}"
              - "The service could not be stopped {{ ansible_hostname }}"
              - "{{ servicio }}"
          ignore_errors: yes
      when: resultTarea == "SUCCESSFUL" and serv_lxn.failed == false

    - name: Resultado de la tarea cuando es Fallido en Linux
      block:
        - name: Muestra el Resultado
          debug:
            msg:
              - "RESULT-AUTOMATION"
              - "-------------------------------------------------------"
              - "Remediation Task Result is: {{ resultTarea }}"
              - "Error message: The service has started successfully"
          ignore_errors: yes
      when: resultTarea == "ESCALATED" and serv_lxn.failed == true
     ##########################
     ## RESULTADO DE LA TAREA EJECUTADA EN WINDOWS ##
     ##########################
    - name: Resultado de la tarea cuando es Exitoso en Windows
      block:
         - name: Muestra el Resultado
           debug:
             msg:
               - "RESULT-AUTOMATION"
               - "-------------------------------------------------------"
               - "Remediation Task Result is: {{ resultTarea }}"
               - " The service could be successfully stopped on the host {{ ansible_hostname }}"
               - "{{ servicio }}"
           ignore_errors: yes
      when: resultTarea == "SUCCESSFUL" and sistema == "Windows"